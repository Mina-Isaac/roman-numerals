{"version":3,"sources":["constants.tsx","Utilities/RomanNumerals.tsx","Utilities/debounceHook.tsx","Components/App.tsx","serviceWorker.ts","index.tsx"],"names":["positiveIntPattern","strictRomanPattern","RomanNumerals","RomanBaseDigits","M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I","toRoman","decNum","Number","isInteger","answer","digit","this","integerQuotient","Math","trunc","repeat","fromRoman","romanString","sum","max","i","length","decimalValue","validatePositiveInteger","num","test","validateRoman","useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","Container","styled","div","Field","Wrapper","Input","input","Err","p","Result","Title","App","decimal","setDecimal","roman","setRoman","handleChange","romOrDec","e","target","romanErr","decimalErr","debouncedRoman","debouncedDecimal","type","onChange","placeholder","min","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPACMA,EAAqB,sBAKrBC,EAAqB,oECiDZC,EApDO,CACpBC,gBAAiB,CACfC,EAAG,IACHC,GAAI,IACJC,EAAG,IACHC,GAAI,IACJC,EAAG,IACHC,GAAI,GACJC,EAAG,GACHC,GAAI,GACJC,EAAG,GACHC,GAAI,EACJC,EAAG,EACHC,GAAI,EACJC,EAAG,GAGLC,QAjBoB,SAiBZC,GACN,GAAKC,OAAOC,UAAUF,MAAWA,GAAU,GAA3C,CACA,IAAIG,EAAS,GACb,IAAK,IAAIC,KAASC,KAAKpB,gBAAiB,CACtC,IAAMqB,EAAkBC,KAAKC,MAC3BR,EAASK,KAAKpB,gBAAgBmB,IAEhCJ,GAAkBK,KAAKpB,gBAAgBmB,GACvCD,GAAUC,EAAMK,OAAOH,GAEzB,OAAOH,IAGTO,UA9BoB,SA8BVC,GAIR,IAHA,IAAIC,EAAM,EACNC,EAAM,EAEDC,EADGH,EAAYI,OACL,EAAGD,GAAK,EAAGA,IAAK,CACjC,IAAME,EAAeX,KAAKpB,gBACxB0B,EAAYG,IAEdF,GAAOI,GAAgBH,EAAMG,GAAgBA,EAC7CH,EAAMN,KAAKM,IAAIA,EAAKG,GAEtB,OAAOJ,GAGTK,wBA5CoB,SA4CIC,GACtB,OAAOpC,EAAmBqC,KAAKD,IAGjCE,cAhDoB,SAgDNT,GACZ,OAAO5B,EAAmBoC,KAAKR,KClDpB,SAASU,EAAYC,EAAYC,GAAgB,IAAD,EACjBC,mBAASF,GADQ,mBACtDG,EADsD,KACtCC,EADsC,KAY7D,OATAC,qBAAU,WACR,IAAMC,EAAUC,YAAW,WACzBH,EAAkBJ,KACjBC,GACH,OAAO,WACLO,aAAaF,MAEd,CAACN,IAEGG,E,0iDCTT,IAAMM,EAAYC,IAAOC,IAAV,KASTC,EAAQF,IAAOC,IAAV,KAgBLE,EAAUH,IAAOC,IAAV,KAUPG,EAAQJ,IAAOK,MAAV,KAgBLC,EAAMN,IAAOO,EAAV,KAGHC,EAASR,IAAOO,EAAV,KAKNE,EAAQT,IAAOO,EAAV,KAiEIG,EA3DO,WAAO,IAAD,EACIlB,mBAAiB,KADrB,mBACnBmB,EADmB,KACVC,EADU,OAEApB,mBAAiB,KAFjB,mBAEnBqB,EAFmB,KAEZC,EAFY,KAI1B,SAASC,EAAaC,GACpB,OAAO,SAACC,GAAD,MACQ,QAAbD,EACIF,EAASG,EAAEC,OAAO5B,OAClBsB,EAAWK,EAAEC,OAAO5B,QAI5B,IAAM6B,EAAWnE,EAAcoC,cAAcyB,GACvCO,EAAapE,EAAciC,wBAAwB0B,GACnDU,EAAiBhC,EACrB8B,GAAYnE,EAAc0B,UAAUmC,GACpC,KAEIS,EAAmBjC,EACvB+B,GAAcpE,EAAce,SAAS4C,GACrC,KAGF,OACE,oCACE,kBAACZ,EAAD,KACE,wFACA,kBAACG,EAAD,KACE,kBAACC,EAAD,KACE,kBAACM,EAAD,2CACA,kBAACL,EAAD,CACEmB,KAAK,SACLC,SAAUT,EAAa,OACvBzB,MAAOqB,EACPc,YAAY,mBACZC,IAAK,KAEJJ,GACD,kBAAChB,EAAD,+CACI,kBAACE,EAAD,0BAAuBc,KAE/B,kBAACnB,EAAD,KACE,kBAACM,EAAD,2CACA,kBAACL,EAAD,CACEmB,KAAK,OACLC,SAAUT,EAAa,OACvBzB,MAAOuB,EACPY,YAAY,2BAEXJ,GACD,kBAACf,EAAD,4CACI,kBAACE,EAAD,2BAAwBa,SC7GtBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bcddd6e9.chunk.js","sourcesContent":["//Regex for positive intigers\r\nconst positiveIntPattern = /^[0-9]*[1-9][0-9]*$/;\r\n\r\n//A loose and a strict Regex for modern Roman numerals source:\r\n//https://www.oreilly.com/library/view/regular-expressions-cookbook/9780596802837/ch06s09.html\r\nconst romanPattern = /^(?=[MDCLXVI])M*(C[MD]|D?C*)(X[CL]|L?X*)(I[XV]|V?I*)$/;\r\nconst strictRomanPattern = /^(?=[MDCLXVI])M*(C[MD]|D?C{0,3})(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$/;\r\n\r\nexport {positiveIntPattern, romanPattern, strictRomanPattern };\r\n","import { positiveIntPattern, strictRomanPattern } from \"../constants\";\r\n\r\ntype indexOfRomanBaseDigits = keyof typeof RomanNumerals.RomanBaseDigits;\r\nconst RomanNumerals = {\r\n  RomanBaseDigits: {\r\n    M: 1000,\r\n    CM: 900,\r\n    D: 500,\r\n    CD: 400,\r\n    C: 100,\r\n    XC: 90,\r\n    L: 50,\r\n    XL: 40,\r\n    X: 10,\r\n    IX: 9,\r\n    V: 5,\r\n    IV: 4,\r\n    I: 1\r\n  },\r\n  //This method is internally validated since it returns undefined for negative or floating point numbers\r\n  toRoman(decNum: number): string | undefined {\r\n    if (!Number.isInteger(decNum) || decNum <= 0) return;\r\n    let answer = \"\";\r\n    for (let digit in this.RomanBaseDigits) {\r\n      const integerQuotient = Math.trunc(\r\n        decNum / this.RomanBaseDigits[digit as indexOfRomanBaseDigits]\r\n      );\r\n      decNum = decNum % this.RomanBaseDigits[digit as indexOfRomanBaseDigits];\r\n      answer += digit.repeat(integerQuotient);\r\n    }\r\n    return answer;\r\n  },\r\n  //This method is internally validated since it returns NaN for an input that is invalid Roman Numeral\r\n  fromRoman(romanString: string): number {\r\n    let sum = 0;\r\n    let max = 0;\r\n    const len = romanString.length;\r\n    for (let i = len - 1; i >= 0; i--) {\r\n      const decimalValue = this.RomanBaseDigits[\r\n        romanString[i] as indexOfRomanBaseDigits\r\n      ];\r\n      sum += decimalValue >= max ? decimalValue : -decimalValue;\r\n      max = Math.max(max, decimalValue);\r\n    }\r\n    return sum;\r\n  },\r\n  //This method validates a user input againist a Regex for positive integers\r\n  validatePositiveInteger(num: string): boolean {\r\n    return positiveIntPattern.test(num);\r\n  },\r\n  //This method validates a user input againist a Regex for Roman numerals\r\n  validateRoman(romanString: string): boolean {\r\n    return strictRomanPattern.test(romanString);\r\n  }\r\n};\r\nexport default RomanNumerals;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport default function useDebounce(value: any, delay: number) {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value]);\r\n\r\n  return debouncedValue;\r\n}\r\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport RomanNumerals from \"../Utilities/RomanNumerals\";\nimport useDebounce from \"../Utilities/debounceHook\";\n\nconst Container = styled.div`\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: linear-gradient(#5cb8f7, #357dec) fixed;\n`;\n\nconst Field = styled.div`\n  z-index: 1;\n  display: flex;\n  padding: 1%;\n  justify-content: space-around;\n  flex-direction: column;\n  background: #fff;\n  min-width: 30vw;\n  max-width: 50vw;\n  height: 80vh;\n  border-radius: 6px;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\n  margin: 40px auto;\n  overflow: hidden;\n`;\n\nconst Wrapper = styled.div`\n  border: solid 1px black;\n  border-radius: 6px;\n  padding: 5%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  height: 40%;\n`;\n\nconst Input = styled.input`\n  display: flex;\n  align-items: center;\n  border: none;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  width: 100%;\n  padding: 15px 15px 15px 20px;\n  box-sizing: border-box;\n  background: #fff;\n  width: 100%;\n  border-radius: 100px;\n  box-shadow: 0 4px 24px rgba(0, 0, 0, 0.1);\n`;\n\nconst Err = styled.p`\n  color: red;\n`;\nconst Result = styled.p`\n  font-weight: bolder;\n  word-break: break-all;\n`;\n\nconst Title = styled.p`\n  color: green;\n  font-size: 14;\n  font-weight: bold;\n`;\n\nconst App: React.FC = () => {\n  const [decimal, setDecimal] = useState<string>(\"1\");\n  const [roman, setRoman] = useState<string>(\"I\");\n\n  function handleChange(romOrDec: \"rom\" | \"dec\") {\n    return (e: React.ChangeEvent<HTMLInputElement>) =>\n      romOrDec === \"rom\"\n        ? setRoman(e.target.value)\n        : setDecimal(e.target.value);\n  }\n\n  //Implementing useDebounce hook to enhance both performance and user experience\n  const romanErr = RomanNumerals.validateRoman(roman);\n  const decimalErr = RomanNumerals.validatePositiveInteger(decimal);\n  const debouncedRoman = useDebounce(\n    romanErr && RomanNumerals.fromRoman(roman),\n    500\n  );\n  const debouncedDecimal = useDebounce(\n    decimalErr && RomanNumerals.toRoman(+decimal),\n    500\n  );\n\n  return (\n    <>\n      <Container>\n        <h1>Convert integer numbers to Roman numerals and vise versa</h1>\n        <Field>\n          <Wrapper>\n            <Title>Decimal integers to Roman numerals</Title>\n            <Input\n              type=\"number\"\n              onChange={handleChange(\"dec\")}\n              value={decimal}\n              placeholder=\"Enter an integer\"\n              min={1}\n            />\n            {(!debouncedDecimal && (\n              <Err>Please enter a valid positive integer</Err>\n            )) || <Result>{`In Romans: ${debouncedDecimal}`}</Result>}\n          </Wrapper>\n          <Wrapper>\n            <Title>Roman numerals to decimal integers</Title>\n            <Input\n              type=\"text\"\n              onChange={handleChange(\"rom\")}\n              value={roman}\n              placeholder=\"Enter a roman numeral\"\n            />\n            {(!debouncedRoman && (\n              <Err>Please enter a valid roman numeral</Err>\n            )) || <Result>{`In Decimal: ${debouncedRoman}`}</Result>}\n          </Wrapper>\n        </Field>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}